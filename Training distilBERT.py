import torch
import torch.nn as nn
from torch.utils.data import DataLoader, Dataset
from transformers import DistilBertTokenizer, DistilBertForSequenceClassification, AdamW
from tqdm import tqdm
import pickle

#Загрузка данных

with open('GPT_fvlist.pkl','rb') as file1:
    fvlist = pickle.load(file1)
print(fvlist)
with open('GPT_fvansw.pkl','rb') as file2:
    fvansw = pickle.load(file2)
print(fvansw)

# Загрузка предварительно обученной модели DistilBERT
model_name = 'distilbert-base-uncased'
tokenizer = DistilBertTokenizer.from_pretrained(model_name)
model = DistilBertForSequenceClassification.from_pretrained(model_name, num_labels=2)

# Определение меток классов
labels = ['фрукт', 'овощ']

# Создание класса Dataset для работы с данными
class FruitVegetableDataset(Dataset):
    def __init__(self, texts, labels):
        self.texts = texts
        self.labels = labels

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, index):
        text = self.texts[index]
        label = self.labels[index]

        encoded_text = tokenizer.encode_plus(
            text,
            truncation=True,
            padding='max_length',
            max_length=360,
            return_tensors='pt'
        )

        input_ids = encoded_text['input_ids'].squeeze()
        attention_mask = encoded_text['attention_mask'].squeeze()

        return input_ids, attention_mask, label

# Создание обучающего набора данных
train_texts = fvlist
train_labels = fvansw

# train_texts = ['Абельмош маниоковый', 'Абельмош съедобный', 'Авокадо', 'Алоказия крупнокорневищная', 'Альпиния галанга', 'Амарант жминда', 'Аморфофаллус пионолистный', 'Ангурия',
#                'Аралия высокая', 'Аралия сердцевидная', 'Арахис', 'Арбуз', 'Арракача съедобная', 'Артишок настоящий', 'Базелла белая', 'Баклажан', 'Бамбуковые побеги', 'Бассия веничная',
#                'Батат', 'Белокопытник японский', 'Бок-чой', 'Болотница сладкая', 'Бразения', 'Брюква', 'Бутень клубненосный', 'Васаби', 'Габлиция', 'Гадючий лук хохлатый', 'Гления', 'Гнетум гнемон',
#                'Горчица белая', 'Дайкон', 'Диоскорея супротивнолистная', 'Диоскорея японская', 'Диплазиум съедобный', 'Дыня', 'Жеруха обыкновенная', 'Зелёный лук', 'Зелень', 'Зюзник блестящий',
#                'Ипомея водяная', 'Канавалия мечевидная', 'Каперсы колючие', 'Капуста огородная', 'Катран приморский', 'Катран татарский', 'Кергеленская капуста', 'Кивано', 'Кислица клубненосная',
#                'Китайский артишок', 'Кодиеум пёстрый', 'Козелец испанский', 'Козлобородник пореелистный', 'Кокциния крупная', 'Колокольчик рапунцель', 'Колоцинт', 'Корнишон', 'Крапива двудомная',
#                'Кресс-салат', 'Крылатые бобы', 'Кувшинка звёздчатая', 'Куркума длинная', 'Куркума цедоария', 'Лагенария', 'Лагенария обыкновенная', 'Лаконос американский', 'Лаконос ягодный',
#                'Латук посевной', 'Лебеда садовая', 'Лоба (растение)', 'Лобия', 'Лопух большой', 'Лук (растение)', 'Лук ветвистый', 'Лук виноградный', 'Лук канадский', 'Лук китайский', 'Лук клубневой',
#                'Лук округлый', 'Лук победный', 'Лук причесночный', 'Лук скорода', 'Лук-батун', 'Лук-порей', 'Лук-шалот', 'Люффа', 'Люффа египетская', 'Люффа остроребристая', 'Мака перуанская',
#                'Маланга', 'Маранта тростниковидная', 'Марь многолистная', 'Марь цельнолистная', 'Мезембриантемум хрустальный', 'Мелотрия шершавая', 'Микрозелень', 'Мирабилис широкий', 'Миррис',
#                'Мицуна', 'Мозамби', 'Момордика харанция', 'Мукуна жгучая', 'Настурция большая', 'Настурция клубненосная', 'Огуречная трава', 'Окопник лекарственный', 'Окопник упландский',
#                'Омежник яванский', 'Опунция индийская', 'Орляк обыкновенный', 'Осот огородный', 'Пастернак посевной', 'Пастушья сумка обыкновенная', 'Перилла', 'Плантан', 'Полевой салат',
#                'Помидофель', 'Радиккьо', 'Ревень', 'Репа', 'Рукола', 'Свербига восточная', 'Сердечник луговой', 'Сердцевина пальмы', 'Сикана душистая', 'Слоновая трава', 'Смолёвка обыкновенная',
#                'Спаржа лекарственная', 'Стрелолист обыкновенный', 'Стрелолист трёхлистный', 'Съедобные цветки', 'Такка перистонадрезанная', 'Тамарилло', 'Татцой', 'Тигридия павлинья', 'Томат',
#                'Трихозант', 'Трихозант змеевидный', 'Укроп', 'Укроп (род)', 'Уллюко', 'Уруть водная', 'Фасоль луновидная', 'Фасоль огненно-красная', 'Фасоль остролистная', 'Физалис овощной',
#                'Хауттюйния', 'Хвощ полевой', 'Хикама', 'Хмелевая спаржа', 'Центелла азиатская', 'Циклантера лопастная', 'Чабер садовый', 'Чайот', 'Чистец болотный', 'Чуфа', 'Шпинат новозеландский',
#                'Шпинат огородный', 'Щавель', 'Эстрагон', 'Якон', 'Австромиртус сладкий', 'Азимина', 'Азимина трёхлопастная', 'Айва', 'Айва бенгальская', 'Акебия', 'Акебия пятерная', 'Аки (растение)',
#                'Алыча', 'Аннона пурпурная', 'Аннона разнолистная', 'Аннона сетчатая', 'Антильский абрикос', 'Араза', 'Архат (растение)', 'Астрокариум колючий', 'Баккорея вкусная', 'Баккорея Мотли',
#                'Бакупари', 'Банан', 'Белая сапота', 'Билимби', 'Бирсонима толстолистная', 'Боярышник мексиканский', 'Бромелия пингвин', 'Бунхозия серебристая', 'Вампи', 'Воаванга',
#                'Восковница красная', 'Гандария', 'Гарциния индийская', 'Гарциния Ливингстона', 'Гарциния Прейна', 'Генипа американская', 'Гетеромелес', 'Гилоцереус коста-риканский',
#                'Гилоцереус крупноцветковый', 'Голубиная слива', 'Гревия азиатская', 'Грейпфрут', 'Грумичама', 'Груша', 'Гуава земляничная', 'Гуайява', 'Давидсония', 'Дакриодес съедобный',
#                'Джамбоза', 'Джамболан', 'Джамбу', 'Джекфрут', 'Довиалис кафрский', 'Дуриан', 'Дынная груша', 'Дынное дерево дуболистное', 'Дынное дерево кундинамаркское',
#                'Дынное дерево пятиугольное', 'Жаботикаба (растение)', 'Звёздчатое яблоко', 'Земляничное дерево красное', 'Земляничное дерево крупноплодное', 'Земляничное дерево Менциса',
#                'Икако', 'Имбу', 'Инга съедобная', 'Ирга', 'Ирга азиатская', 'Ирга канадская', 'Ирга круглолистная', 'Испанский лайм', 'Каимито (растение)', 'Канистель', 'Канталупа (растение)',
#                'Капулин', 'Карамбола', 'Кариокар бразильский', 'Карисса', 'Карисса каранда', 'Карисса крупноцветковая', 'Квини', 'Кепель', 'Кешью', 'Киви (фрукт)', 'Кизил обыкновенный',
#                'Кокколоба ягодоносная', 'Кокона', 'Конфетное дерево', 'Корлан', 'Криптокария белая', 'Ксимения американская', 'Кудрания триостренная', 'Кумкват', 'Купуасу', 'Лангсат',
#                'Лардизабала', 'Лимон', 'Лимон дикий', 'Личи', 'Лонган (растение)', 'Лукума', 'Лума остроконечная', 'Малайское яблоко', 'Малина майсорская', 'Малина пурпурноплодная', 'Мальпигия голая',
#                'Манго (фрукт)', 'Манго индийское', 'Манго пахучее', 'Мангостан', 'Мандарин', 'Мандарин (фрукт)', 'Мандарин уншиу', 'Мандора (фрукт)', 'Маракуйя (фрукт)', 'Маранг', 'Миннеола (фрукт)',
#                'Мирциария сомнительная', 'Момбин жёлтый', 'Момбин пурпурный', 'Момордика кохинхинская', 'Мунтингия', 'Мушмула германская', 'Мушмула японская', 'Наранхилья', 'Опунция индийская',
#                'Пальма тукум', 'Пальмировая пальма', 'Пандан полезный', 'Папайя', 'Папеда ежеиглистая', 'Пассифлора нежнейшая', 'Переския шиповатая', 'Персик (фрукт)', 'Персиковая пальма', 'Питайя',
#                'Питецеллобиум сладкий', 'Питомба', 'Платония', 'Плумкот', 'Помело (фрукт)', 'Померанец', 'Псевдоайва', 'Пулазан', 'Пурума цекропиелистная', 'Ракум-салакка', 'Рамбутан',
#                'Рангпур (фрукт)', 'Родомирт войлочный', 'Роллиния слизистая', 'Салак', 'Саламандровое дерево', 'Сантол', 'Саподилла', 'Сапота', 'Сахарное яблоко', 'Сизигиум масляный',
#                'Сизигиум метельчатый', 'Сизигиум сердцевидный', 'Сизигиум южный', 'Сикана душистая', 'Склерокария', 'Слива (фрукт)', 'Слоновое яблоко', 'Сметанное яблоко', 'Страстоцвет лавролистный',
#                'Страстоцвет съедобный', 'Страстоцвет четырёхгранный', 'Страстоцвет язычковый', 'Стрихнос колючий', 'Суринамская вишня', 'Тамарилло', 'Тамаринд', 'Терминалия Фердинанда', 'Угни Молины',
#                'Фейхоа', 'Физалис перуанский', 'Фикус', 'Фикус кистевидный', 'Фикус священный', 'Филлантус кислый', 'Хлебное дерево', 'Хурма', 'Хурма виргинская', 'Хурма восточная', 'Хурма кавказская',
#                'Хурма низкая', 'Хурма разноцветная', 'Цедра', 'Цейлонский крыжовник', 'Чалта', 'Чемпедак', 'Черёмуха виргинская', 'Черимойя', 'Чёрная сапота', 'Чудесные ягоды', 'Чулюпа', 'Чупа-чупа',
#                'Шелковица белая', 'Шелковица красная']
# train_labels = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#                 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

train_dataset = FruitVegetableDataset(train_texts, train_labels)
train_dataloader = DataLoader(train_dataset, batch_size=2, shuffle=True)

# Функция обучения модели
def train_model(model, dataloader, epochs):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model.to(device)
    model.train()

    optimizer = AdamW(model.parameters(), lr=1e-5)

    criterion = nn.CrossEntropyLoss()

    for epoch in range(epochs):
        total_loss = 0.0

        progress_bar = tqdm(dataloader, desc=f'Epoch {epoch+1}/{epoch}',leave=False)

        print(epoch)
        for input_ids, attention_mask, labels in dataloader:
            input_ids = input_ids.to(device)
            attention_mask = attention_mask.to(device)
            labels = labels.to(device)

            optimizer.zero_grad()

            outputs = model(input_ids, attention_mask=attention_mask)

            logits = outputs.logits
            loss = criterion(logits, labels)

            loss.backward()
            optimizer.step()

            total_loss += loss.item()

            progress_bar.set_postfix({'Loss': loss.item()})
        avg_loss = total_loss / len(dataloader)
        print(f'Epoch {epoch+1}/{epochs}, Loss: {avg_loss:.4f}')

# Обучение модели
train_model(model, train_dataloader, epochs=5)

# Сохранение обученной модели
model.save_pretrained('model_2')
tokenizer.save_pretrained('tokenizer_2')
